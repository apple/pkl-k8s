//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.authorization.v1.ResourceAttributes

extends ".../K8sObject.pkl"

import ".../apimachinery/pkg/apis/meta/v1/LabelSelectorRequirement.pkl"
import ".../apimachinery/pkg/apis/meta/v1/FieldSelectorRequirement.pkl"

/// Resource is one of the existing resource types.
///
/// "*" means all.
resource: String?

/// Subresource is one of the existing resource types.
///
/// "" means none.
subresource: String?

/// labelSelector describes the limitation on access based on labels.
///
/// It can only limit access, not broaden it.
/// 
/// This field  is alpha-level.
/// To use this field, you must enable the `AuthorizeWithSelectors` feature gate (disabled by default).
@K8sVersion { introducedIn = "1.31" }
labelSelector: LabelSelectorAttributes?

/// Name is the name of the resource being requested for a "get" or deleted for a "delete".
///
/// "" (empty) means all.
name: String?

/// Namespace is the namespace of the action being requested.
///
/// Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
namespace: String?

/// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.
///
/// "*" means all.
verb: String?

/// fieldSelector describes the limitation on access based on field.
///
/// It can only limit access, not broaden it.
/// 
/// This field  is alpha-level.
/// To use this field, you must enable the `AuthorizeWithSelectors` feature gate (disabled by default).
@K8sVersion { introducedIn = "1.31" }
fieldSelector: FieldSelectorAttributes?

/// Version is the API Version of the Resource.
///
/// "*" means all.
version: String?

/// Group is the API Group of the Resource.
///
/// "*" means all.
group: String?

/// LabelSelectorAttributes indicates a label limited access.
///
/// Webhook authors are encouraged to
/// * ensure rawSelector and requirements are not both set
/// * consider the requirements field if set
/// * not try to parse or consider the rawSelector field if set.
/// This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see <https://www.oxeye.io/resources/golang-parameter-smuggling-attack> for more details.
/// For the *SubjectAccessReview endpoints of the kube-apiserver:
/// * If rawSelector is empty and requirements are empty, the request is not limited.
/// * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds.
/// * If rawSelector is empty and requirements are present, the requirements should be honored
/// * If rawSelector is present and requirements are present, the request is invalid.
class LabelSelectorAttributes {
  /// requirements is the parsed interpretation of a label selector.
  ///
  /// All requirements must be met for a resource instance to match the selector.
  /// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
  /// Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
  requirements: Listing<LabelSelectorRequirement>?

  /// rawSelector is the serialization of a field selector that would be included in a query parameter.
  ///
  /// Webhook implementations are encouraged to ignore rawSelector.
  /// The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
  rawSelector: String?
}

/// FieldSelectorAttributes indicates a field limited access.
///
/// Webhook authors are encouraged to
/// * ensure rawSelector and requirements are not both set
/// * consider the requirements field if set
/// * not try to parse or consider the rawSelector field if set.
/// This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see <https://www.oxeye.io/resources/golang-parameter-smuggling-attack> for more details.
/// For the *SubjectAccessReview endpoints of the kube-apiserver:
/// * If rawSelector is empty and requirements are empty, the request is not limited.
/// * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds.
/// * If rawSelector is empty and requirements are present, the requirements should be honored
/// * If rawSelector is present and requirements are present, the request is invalid.
class FieldSelectorAttributes {
  /// requirements is the parsed interpretation of a field selector.
  ///
  /// All requirements must be met for a resource instance to match the selector.
  /// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
  /// Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
  requirements: Listing<FieldSelectorRequirement>?

  /// rawSelector is the serialization of a field selector that would be included in a query parameter.
  ///
  /// Webhook implementations are encouraged to ignore rawSelector.
  /// The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
  rawSelector: String?
}

