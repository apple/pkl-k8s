//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend.
///
/// An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.networking.v1.Ingress

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/TypedLocalObjectReference.pkl"

fixed apiVersion: "networking.k8s.io/v1"

fixed kind: "Ingress"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec is the desired state of the Ingress.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
spec: IngressSpec?

/// status is the current state of the Ingress.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
status: IngressStatus?

/// IngressSpec describes the Ingress the user wishes to exist.
class IngressSpec {
  /// defaultBackend is the backend that should handle requests that don't match any rule.
  ///
  /// If Rules are not specified, DefaultBackend must be specified.
  /// If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
  defaultBackend: IngressBackend?

  /// ingressClassName is the name of an IngressClass cluster resource.
  ///
  /// Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource).
  /// Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources.
  /// Newly created Ingress resources should prefer using the field.
  /// However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
  ingressClassName: String?

  /// rules is a list of host rules used to configure the Ingress.
  ///
  /// If unspecified, or no rule matches, all traffic is sent to the default backend.
  rules: Listing<IngressRule>?

  /// tls represents the TLS configuration.
  ///
  /// Currently the Ingress only supports a single TLS port, 443.
  /// If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
  tls: Listing<IngressTLS>?
}

/// IngressBackend describes all endpoints for a given service and port.
class IngressBackend {
  /// resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object.
  ///
  /// If resource is specified, a service.Name and service.Port must not be specified.
  /// This is a mutually exclusive setting with "Service".
  resource: TypedLocalObjectReference?

  /// service references a service as a backend.
  ///
  /// This is a mutually exclusive setting with "Resource".
  service: IngressServiceBackend?
}

/// IngressServiceBackend references a Kubernetes Service as a Backend.
class IngressServiceBackend {
  /// port of the referenced service.
  ///
  /// A port name or port number is required for a IngressServiceBackend.
  port: ServiceBackendPort

  /// name is the referenced service.
  ///
  /// The service must exist in the same namespace as the Ingress object.
  name: String
}

/// ServiceBackendPort is the service port being referenced.
class ServiceBackendPort {
  /// number is the numerical port number (e.g. 80) on the Service.
  ///
  /// This is a mutually exclusive setting with "Name".
  number: PortNumber?

  /// name is the name of the port on the Service.
  ///
  /// This is a mutually exclusive setting with "Number".
  name: PortName?((this != null).xor(number != null))
}

/// IngressRule represents the rules mapping the paths under a specified host to the related backend services.
///
/// Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
class IngressRule {
  /// host is the fully qualified domain name of a network host, as defined by RFC 3986.
  ///
  /// Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1.
  /// IPs are not allowed.
  /// Currently an IngressRuleValue can only apply to
  ///    the IP in the Spec of the parent Ingress.
  /// 2.
  /// The `:` delimiter is not respected because ports are not allowed.
  /// 	  Currently the port of an Ingress is implicitly :80 for http and
  /// 	  :443 for https.
  /// Both these may change in the future.
  /// Incoming requests are matched against the host before the IngressRuleValue.
  /// If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
  /// 
  /// host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com").
  /// The wildcard character '*' must appear by itself as the first DNS label and matches only a single label.
  /// You cannot have a wildcard label by itself (e.g. Host == "*").
  /// Requests will be matched against the Host field in the following way: 1.
  /// If host is precise, the request matches this rule if the http host header is equal to Host.
  /// 2.
  /// If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
  host: String?

  http: HTTPIngressRuleValue?
}

/// HTTPIngressRuleValue is a list of http selectors pointing to backends.
///
/// In the example: <http://<host>/<path>?<searchpart>> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
class HTTPIngressRuleValue {
  /// paths is a collection of paths that map requests to backends.
  paths: Listing<HTTPIngressPath>
}

/// HTTPIngressPath associates a path with a backend.
///
/// Incoming urls matching the path are forwarded to the backend.
class HTTPIngressPath {
  /// path is matched against the path of an incoming request.
  ///
  /// Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
  /// Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
  path: String(startsWith("/"))?

  /// backend defines the referenced service endpoint to which the traffic will be forwarded to.
  backend: IngressBackend

  /// pathType determines the interpretation of the path matching.
  ///
  /// PathType can be one of the following values:
  /// * Exact: Matches the URL path exactly.
  /// * Prefix: Matches based on a URL path prefix split by '/'.
  /// Matching is
  ///   done on a path element by element basis.
  /// A path element refers is the
  ///   list of labels in the path split by the '/' separator.
  /// A request is a
  ///   match for path p if every p is an element-wise prefix of p of the
  ///   request path.
  /// Note that if the last element of the path is a substring
  ///   of the last element in request path, it is not a match (e.g. /foo/bar
  ///   matches /foo/bar/baz, but does not match /foo/barbaz).
  /// * ImplementationSpecific: Interpretation of the Path matching is up to
  ///   the IngressClass.
  /// Implementations can treat this as a separate PathType
  ///   or treat it identically to Prefix or Exact path types.
  /// Implementations are required to support all path types.
  pathType: "Exact"(path != null)|"Prefix"(path != null)|"ImplementationSpecific"
}

/// IngressTLS describes the transport layer security associated with an ingress.
class IngressTLS {
  /// secretName is the name of the secret used to terminate TLS traffic on port 443.
  ///
  /// Field is left optional to allow TLS routing based on SNI hostname alone.
  /// If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
  secretName: String?

  /// hosts is a list of hosts included in the TLS certificate.
  ///
  /// The values in this list must match the name/s used in the tlsSecret.
  /// Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
  hosts: Listing<String>?
}

/// IngressStatus describe the current state of the Ingress.
class IngressStatus {
  /// loadBalancer contains the current status of the load-balancer.
  loadBalancer: IngressLoadBalancerStatus?
}

/// IngressLoadBalancerStatus represents the status of a load-balancer.
class IngressLoadBalancerStatus {
  /// ingress is a list containing ingress points for the load-balancer.
  ingress: Listing<IngressLoadBalancerIngress>?
}

/// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
class IngressLoadBalancerIngress {
  /// hostname is set for load-balancer ingress points that are DNS based.
  hostname: String?

  /// ip is set for load-balancer ingress points that are IP based.
  ip: String?

  /// ports provides information about the ports exposed by this LoadBalancer.
  ports: Listing<IngressPortStatus>?
}

/// IngressPortStatus represents the error condition of a service port
class IngressPortStatus {
  /// protocol is the protocol of the ingress port.
  ///
  /// The supported values are: "TCP", "UDP", "SCTP"
  protocol: String

  /// port is the port number of the ingress port.
  port: Int32

  /// error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
  ///
  ///   CamelCase names
  /// - cloud provider specific error values must have names that comply with the
  ///   format foo.example.com/CamelCase.
  error: String?
}

