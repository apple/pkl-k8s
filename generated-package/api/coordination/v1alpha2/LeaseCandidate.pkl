//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// LeaseCandidate defines a candidate for a Lease object.
///
/// Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
@K8sVersion { introducedIn = "1.32" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.coordination.v1alpha2.LeaseCandidate

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "coordination.k8s.io/v1alpha2"

fixed kind: "LeaseCandidate"

/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec contains the specification of the Lease.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
spec: LeaseCandidateSpec?

/// LeaseCandidateSpec is a specification of a Lease.
class LeaseCandidateSpec {
  /// RenewTime is the time that the LeaseCandidate was last updated.
  ///
  /// Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime.
  /// Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew.
  /// The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
  renewTime: MicroTime?

  /// BinaryVersion is the binary version.
  ///
  /// It must be in a semver format without leading `v`.
  /// This field is required.
  binaryVersion: String

  /// EmulationVersion is the emulation version.
  ///
  /// It must be in a semver format without leading `v`.
  /// EmulationVersion must be less than or equal to BinaryVersion.
  /// This field is required when strategy is "OldestEmulationVersion"
  emulationVersion: String?

  /// PingTime is the last time that the server has requested the LeaseCandidate to renew.
  ///
  /// It is only done during leader election to check if any LeaseCandidates have become ineligible.
  /// When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
  pingTime: MicroTime?

  /// LeaseName is the name of the lease for which this candidate is contending.
  ///
  /// This field is immutable.
  leaseName: String

  /// Strategy is the strategy that coordinated leader election will use for picking the leader.
  ///
  /// If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used.
  /// If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
  /// (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
  strategy: String
}

