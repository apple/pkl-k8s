//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// JobSpec describes how the job execution will look like.
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.batch.v1.JobSpec

extends ".../K8sObject.pkl"

import ".../api/core/v1/PodTemplateSpec.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"

/// suspend specifies whether the Job controller should create Pods or not.
///
/// If a Job is created with suspend set to true, no Pods are created by the Job controller.
/// If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job.
/// Users must design their workload to gracefully handle this.
/// Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too.
/// Defaults to false.
@K8sVersion { introducedIn = "1.21" }
suspend: Boolean?

/// Describes the pod that will be created when executing a job.
///
/// The only allowed template.spec.restartPolicy values are "Never" or "OnFailure".
/// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>
template: PodTemplateSpec

/// Specifies the number of retries before marking this job failed.
///
/// Defaults to 6
backoffLimit: Int32?

/// Specifies the limit for the number of retries within an index before marking this index as failed.
///
/// When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation.
/// It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never.
/// The field is immutable.
/// This field is beta-level.
/// It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
@K8sVersion { introducedIn = "1.28" }
backoffLimitPerIndex: Int32?

/// manualSelector controls generation of pod labels and pod selectors.
///
/// Leave `manualSelector` unset unless you are certain what you are doing.
/// When false or unset, the system pick labels unique to this job and appends those labels to the pod template.
/// When true, the user is responsible for picking unique labels and specifying the selector.
/// Failure to pick a unique label may cause this and other jobs to not function correctly.
/// However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API.
/// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector>
manualSelector: Boolean?

/// Specifies the maximum desired number of pods the job should run at any given time.
///
/// The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.
/// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>
parallelism: Int32?

/// Specifies the desired number of successfully finished pods the job should be run with.
///
/// Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.
/// Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job.
/// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>
completions: Int32?

/// completionMode specifies how Pod completions are tracked.
///
/// It can be `NonIndexed` (default) or `Indexed`.
/// 
/// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods.
/// Each Pod completion is homologous to each other.
/// 
/// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index.
/// The Job is considered complete when there is one successfully completed Pod for each index.
/// When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5.
/// In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
/// 
/// More completion modes can be added in the future.
/// If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
@K8sVersion { introducedIn = "1.21" }
completionMode: ("NonIndexed"|"Indexed")?

/// Specifies the policy of handling failed pods.
///
/// In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action.
/// If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit.
/// This field cannot be used in combination with restartPolicy=OnFailure.
/// 
/// This field is beta-level.
/// It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
@K8sVersion { introducedIn = "1.25" }
podFailurePolicy: PodFailurePolicy?

/// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed).
///
/// If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted.
/// When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored.
/// If this field is unset, the Job won't be automatically deleted.
/// If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
ttlSecondsAfterFinished: Int32?

/// podReplacementPolicy specifies when to create replacement Pods.
///
/// Possible values are: - TerminatingOrFailed means that we recreate pods
///   when they are terminating (has a metadata.deletionTimestamp) or failed.
/// - Failed means to wait until a previously created Pod is fully terminated (has phase
///   Failed or Succeeded) before creating a replacement Pod.
/// 
/// When using podFailurePolicy, Failed is the the only allowed value.
/// TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use.
/// This is an beta field.
/// To use this, enable the JobPodReplacementPolicy feature toggle.
/// This is on by default.
@K8sVersion { introducedIn = "1.28" }
podReplacementPolicy: String?

/// ManagedBy field indicates the controller that manages a Job.
///
/// The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field.
/// The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first "/" must be a valid subdomain as defined by RFC 1123.
/// All characters trailing the first "/" must be valid HTTP Path characters as defined by RFC 3986.
/// The value cannot exceed 64 characters.
/// 
/// This field is alpha-level.
/// The job controller accepts setting the field when the feature gate JobManagedBy is enabled (disabled by default).
@K8sVersion { introducedIn = "1.30" }
managedBy: String?

/// A label query over pods that should match the pod count.
///
/// Normally, the system sets this field for you.
/// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>
selector: LabelSelector?

/// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set.
///
/// Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated.
/// When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition.
/// It can only be specified when backoffLimitPerIndex is set.
/// It can be null or up to completions.
/// It is required and must be less than or equal to 10^4 when is completions greater than 10^5.
/// This field is beta-level.
/// It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
@K8sVersion { introducedIn = "1.28" }
maxFailedIndexes: Int32?

/// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer.
///
/// If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
activeDeadlineSeconds: Int?

/// successPolicy specifies the policy when the Job can be declared as succeeded.
///
/// If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions.
/// When the field is specified, it must be immutable and works only for the Indexed Jobs.
/// Once the Job meets the SuccessPolicy, the lingering pods are terminated.
/// 
/// This field  is alpha-level.
/// To use this field, you must enable the `JobSuccessPolicy` feature gate (disabled by default).
@K8sVersion { introducedIn = "1.30" }
successPolicy: SuccessPolicy?

/// PodFailurePolicy describes how failed pods influence the backoffLimit.
class PodFailurePolicy {
  /// A list of pod failure policy rules.
  ///
  /// The rules are evaluated in order.
  /// Once a rule matches a Pod failure, the remaining of the rules are ignored.
  /// When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit.
  /// At most 20 elements are allowed.
  rules: Listing<PodFailurePolicyRule>
}

/// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met.
///
/// One of onExitCodes and onPodConditions, but not both, can be used in each rule.
class PodFailurePolicyRule {
  /// Represents the requirement on the container exit codes.
  onExitCodes: PodFailurePolicyOnExitCodesRequirement?

  /// Specifies the action taken on a pod failure when the requirements are satisfied.
  ///
  /// Possible values are:
  /// 
  /// - FailJob: indicates that the pod's job is marked as Failed and all
  ///   running pods are terminated.
  /// - FailIndex: indicates that the pod's index is marked as Failed and will
  ///   not be restarted.
  ///   This value is beta-level.
  /// It can be used when the
  ///   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
  /// - Ignore: indicates that the counter towards the .backoffLimit is not
  ///   incremented and a replacement pod is created.
  /// - Count: indicates that the pod is handled in the default way - the
  ///   counter towards the .backoffLimit is incremented.
  /// Additional values are considered to be added in the future.
  /// Clients should react to an unknown action by skipping the rule.
  action: String

  /// Represents the requirement on the pod conditions.
  ///
  /// The requirement is represented as a list of pod condition patterns.
  /// The requirement is satisfied if at least one pattern matches an actual pod condition.
  /// At most 20 elements are allowed.
  onPodConditions: Listing<PodFailurePolicyOnPodConditionsPattern>?
}

/// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes.
///
/// In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively.
/// Containers completed with success (exit code 0) are excluded from the requirement check.
class PodFailurePolicyOnExitCodesRequirement {
  /// Restricts the check for exit codes to the container with the specified name.
  ///
  /// When null, the rule applies to all containers.
  /// When specified, it should match one the container or initContainer names in the pod template.
  containerName: String?

  /// Specifies the set of values.
  ///
  /// Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator.
  /// The list of values must be ordered and must not contain duplicates.
  /// Value '0' cannot be used for the In operator.
  /// At least one element is required.
  /// At most 255 elements are allowed.
  values: Listing<Int32>

  /// Represents the relationship between the container exit code(s) and the specified values.
  ///
  /// Containers completed with success (exit code 0) are excluded from the requirement check.
  /// Possible values are:
  /// 
  /// - In: the requirement is satisfied if at least one container exit code
  ///   (might be multiple if there are multiple containers not restricted
  ///   by the 'containerName' field) is in the set of specified values.
  /// - NotIn: the requirement is satisfied if at least one container exit code
  ///   (might be multiple if there are multiple containers not restricted
  ///   by the 'containerName' field) is not in the set of specified values.
  /// Additional values are considered to be added in the future.
  /// Clients should react to an unknown operator by assuming the requirement is not satisfied.
  operator: String
}

/// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
class PodFailurePolicyOnPodConditionsPattern {
  /// Specifies the required Pod condition type.
  ///
  /// To match a pod condition it is required that specified type equals the pod condition type.
  type: String

  /// Specifies the required Pod condition status.
  ///
  /// To match a pod condition it is required that the specified status equals the pod condition status.
  /// Defaults to True.
  status: String
}

/// SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
class SuccessPolicy {
  /// rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`.
  ///
  /// Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed.
  /// The terminal state for such a Job has the "Complete" condition.
  /// Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored.
  /// At most 20 elements are allowed.
  rules: Listing<SuccessPolicyRule>
}

/// SuccessPolicyRule describes rule for declaring a Job as succeeded.
///
/// Each rule must have at least one of the "succeededIndexes" or "succeededCount" specified.
class SuccessPolicyRule {
  /// succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job.
  ///
  /// When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes.
  /// For example, given that succeededIndexes is "1-4", succeededCount is "3", and completed indexes are "1", "3", and "5", the Job isn't declared as succeeded because only "1" and "3" indexes are considered in that rules.
  /// When this field is null, this doesn't default to any value and is never evaluated at any time.
  /// When specified it needs to be a positive integer.
  succeededCount: Int32?

  /// succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job.
  ///
  /// The list of indexes must be within 0 to ".spec.completions-1" and must not contain duplicates.
  /// At least one element is required.
  /// The indexes are represented as intervals separated by commas.
  /// The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen.
  /// The number are listed in represented by the first and last element of the series, separated by a hyphen.
  /// For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
  /// When this field is null, this field doesn't default to any value and is never evaluated at any time.
  succeededIndexes: String?
}

