//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ResourceClaim describes a request for access to resources in the cluster, for use by workloads.
///
/// For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed.
/// The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.
/// 
/// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
@K8sVersion { introducedIn = "1.31" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.resource.v1alpha3.ResourceClaim

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/resource/v1alpha3/ResourceClaimSpec.pkl"
import ".../api/resource/v1alpha3/OpaqueDeviceConfiguration.pkl"
import ".../api/core/v1/NodeSelector.pkl"
import ".../apimachinery/pkg/apis/meta/v1/Condition.pkl"

fixed apiVersion: "resource.k8s.io/v1alpha3"

fixed kind: "ResourceClaim"

/// Standard object metadata
metadata: ObjectMeta?

/// Spec describes what is being requested and how to configure it.
///
/// The spec is immutable.
spec: ResourceClaimSpec

/// Status describes whether the claim is ready to use and what has been allocated.
status: ResourceClaimStatus?

/// ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
class ResourceClaimStatus {
  /// Allocation is set once the claim has been allocated successfully.
  allocation: AllocationResult?

  /// ReservedFor indicates which entities are currently allowed to use the claim.
  ///
  /// A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
  /// A claim that is in use or might be in use because it has been reserved must not get deallocated.
  /// 
  /// In a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers.
  /// When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.
  /// 
  /// Both schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored.
  /// The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.
  /// 
  /// There can be at most 256 such reservations.
  /// This may get increased in the future, but not reduced.
  reservedFor: Listing<ResourceClaimConsumerReference>?

  /// Devices contains the status of each device allocated for this claim, as reported by the driver.
  ///
  /// This can include driver-specific information.
  /// Entries are owned by their respective drivers.
  @K8sVersion { introducedIn = "1.32" }
  devices: Listing<AllocatedDeviceStatus>?

  /// Indicates that a claim is to be deallocated.
  ///
  /// While this is set, no new consumers may be added to ReservedFor.
  /// 
  /// This is only used if the claim needs to be deallocated by a DRA driver.
  /// That driver then must deallocate this claim and reset the field together with clearing the Allocation field.
  /// 
  /// This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
  @K8sVersion { removedIn = "1.32" }
  deallocationRequested: Boolean?
}

/// AllocationResult contains attributes of an allocated resource.
class AllocationResult {
  /// Devices is the result of allocating devices.
  devices: DeviceAllocationResult?

  /// NodeSelector defines where the allocated resources are available.
  ///
  /// If unset, they are available everywhere.
  nodeSelector: NodeSelector?

  /// Controller is the name of the DRA driver which handled the allocation.
  ///
  /// That driver is also responsible for deallocating the claim.
  /// It is empty when the claim can be deallocated without involving a driver.
  /// 
  /// A driver may allocate devices provided by other drivers, so this driver name here can be different from the driver names listed for the results.
  /// 
  /// This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
  @K8sVersion { removedIn = "1.32" }
  controller: String?
}

/// DeviceAllocationResult is the result of allocating devices.
class DeviceAllocationResult {
  /// This field is a combination of all the claim and class configuration parameters.
  ///
  /// Drivers can distinguish between those based on a flag.
  /// 
  /// This includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support.
  /// They can silently ignore unknown configuration parameters.
  config: Listing<DeviceAllocationConfiguration>?

  /// Results lists all allocated devices.
  results: Listing<DeviceRequestAllocationResult>?
}

/// DeviceAllocationConfiguration gets embedded in an AllocationResult.
class DeviceAllocationConfiguration {
  /// Opaque provides driver-specific configuration parameters.
  opaque: OpaqueDeviceConfiguration?

  /// Requests lists the names of requests where the configuration applies.
  ///
  /// If empty, its applies to all requests.
  requests: Listing<String>?

  /// Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
  source: String
}

/// DeviceRequestAllocationResult contains the allocation result for one request.
class DeviceRequestAllocationResult {
  /// Request is the name of the request in the claim which caused this device to be allocated.
  ///
  /// Multiple devices may have been allocated per request.
  request: String

  /// AdminAccess indicates that this device was allocated for administrative access.
  ///
  /// See the corresponding request field for a definition of mode.
  /// 
  /// This is an alpha field and requires enabling the DRAAdminAccess feature gate.
  /// Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
  @K8sVersion { introducedIn = "1.32" }
  adminAccess: Boolean?

  /// Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
  ///
  /// 
  /// Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
  driver: String

  /// This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
  ///
  /// 
  /// Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
  pool: String

  /// Device references one device instance via its name in the driver's resource pool.
  ///
  /// It must be a DNS label.
  device: String
}

/// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim.
///
/// The user must be a resource in the same namespace as the ResourceClaim.
class ResourceClaimConsumerReference {
  /// UID identifies exactly one incarnation of the resource.
  uid: String

  /// APIGroup is the group for the resource being referenced.
  ///
  /// It is empty for the core API.
  /// This matches the group in the APIVersion that is used when creating the resources.
  apiGroup: String?

  /// Resource is the type of resource being referenced, for example "pods".
  resource: String

  /// Name is the name of resource being referenced.
  name: String
}

/// AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it.
///
/// This may include driver-specific information.
class AllocatedDeviceStatus {
  /// Data contains arbitrary driver-specific data.
  ///
  /// 
  /// The length of the raw data must be smaller or equal to 10 Ki.
  data: RawExtension?

  /// Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
  ///
  /// 
  /// Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
  driver: String

  /// NetworkData contains network-related information specific to the device.
  networkData: NetworkDeviceData?

  /// This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
  ///
  /// 
  /// Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
  pool: String

  /// Conditions contains the latest observation of the device's state.
  ///
  /// If the device has been configured according to the class and claim config references, the `Ready` condition should be True.
  conditions: Listing<Condition>?

  /// Device references one device instance via its name in the driver's resource pool.
  ///
  /// It must be a DNS label.
  device: String
}

/// NetworkDeviceData provides network-related details for the allocated device.
///
/// This information may be filled by drivers or other components to configure or identify the device within a network context.
class NetworkDeviceData {
  /// HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.
  ///
  /// 
  /// Must not be longer than 128 characters.
  hardwareAddress: String?

  /// InterfaceName specifies the name of the network interface associated with the allocated device.
  ///
  /// This might be the name of a physical or virtual network interface being configured in the pod.
  /// 
  /// Must not be longer than 256 characters.
  interfaceName: String?

  /// IPs lists the network addresses assigned to the device's network interface.
  ///
  /// This can include both IPv4 and IPv6 addresses.
  /// The IPs are in the CIDR notation, which includes both the address and the associated subnet mask.
  /// e.g.: "192.0.2.5/24" for IPv4 and "2001:db8::5/64" for IPv6.
  ips: Listing<String>?
}

