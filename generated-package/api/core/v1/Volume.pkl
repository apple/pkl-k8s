//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Volume represents a named volume in a pod that may be accessed by any container in the pod.
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.core.v1.Volume

extends ".../K8sObject.pkl"

import ".../api/core/v1/QuobyteVolumeSource.pkl"
import ".../api/core/v1/LocalObjectReference.pkl"
import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/PersistentVolumeClaimSpec.pkl"
import ".../api/core/v1/ResourceFieldSelector.pkl"
import ".../api/core/v1/ObjectFieldSelector.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"
import ".../api/core/v1/GCEPersistentDiskVolumeSource.pkl"
import ".../api/core/v1/PhotonPersistentDiskVolumeSource.pkl"
import ".../api/core/v1/AzureDiskVolumeSource.pkl"
import ".../api/core/v1/AWSElasticBlockStoreVolumeSource.pkl"
import ".../api/core/v1/FlockerVolumeSource.pkl"
import ".../api/core/v1/NFSVolumeSource.pkl"
import ".../api/core/v1/PortworxVolumeSource.pkl"
import ".../api/core/v1/VsphereVirtualDiskVolumeSource.pkl"
import ".../api/core/v1/FCVolumeSource.pkl"
import ".../api/core/v1/HostPathVolumeSource.pkl"

/// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
quobyte: QuobyteVolumeSource?

/// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
azureFile: AzureFileVolumeSource?

/// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
flexVolume: FlexVolumeSource?

/// ephemeral represents a volume that is handled by a cluster storage driver.
///
/// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
/// 
/// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
///    tracking are needed,
/// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
///    a PersistentVolumeClaim (see EphemeralVolumeSource for more
///    information on the connection between this volume type
///    and PersistentVolumeClaim).
/// 
/// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
/// 
/// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
/// 
/// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
ephemeral: EphemeralVolumeSource?

/// secret represents a secret that should populate this volume.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>
secret: SecretVolumeSource?

/// projected items for all in one resources secrets, configmaps, and downward API
projected: ProjectedVolumeSource?

/// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
cephfs: CephFSVolumeSource?

/// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
scaleIO: ScaleIOVolumeSource?

/// emptyDir represents a temporary directory that shares a pod's lifetime.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
emptyDir: EmptyDirVolumeSource?

/// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
///
/// More info: <https://examples.k8s.io/volumes/glusterfs/README.md>
glusterfs: GlusterfsVolumeSource?

/// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
gcePersistentDisk: GCEPersistentDiskVolumeSource?

/// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
photonPersistentDisk: PhotonPersistentDiskVolumeSource?

/// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
azureDisk: AzureDiskVolumeSource?

/// cinder represents a cinder volume attached and mounted on kubelets host machine.
///
/// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
cinder: CinderVolumeSource?

/// downwardAPI represents downward API about the pod that should populate this volume
downwardAPI: DownwardAPIVolumeSource?

/// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
awsElasticBlockStore: AWSElasticBlockStoreVolumeSource?

/// flocker represents a Flocker volume attached to a kubelet's host machine.
///
/// This depends on the Flocker control service being running
flocker: FlockerVolumeSource?

/// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod.
///
/// More info: <https://examples.k8s.io/volumes/iscsi/README.md>
iscsi: ISCSIVolumeSource?

/// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
///
/// More info: <https://examples.k8s.io/volumes/rbd/README.md>
rbd: RBDVolumeSource?

/// configMap represents a configMap that should populate this volume
configMap: ConfigMapVolumeSource?

/// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
storageos: StorageOSVolumeSource?

/// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
csi: CSIVolumeSource?

/// name of the volume.
///
/// Must be a DNS_LABEL and unique within the pod.
/// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
name: Rfc1035Label

/// nfs represents an NFS mount on the host that shares a pod's lifetime More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
nfs: NFSVolumeSource?

/// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
persistentVolumeClaim: PersistentVolumeClaimVolumeSource?

/// gitRepo represents a git repository at a particular revision.
///
/// DEPRECATED: GitRepo is deprecated.
/// To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
@Deprecated
gitRepo: GitRepoVolumeSource?

/// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
portworxVolume: PortworxVolumeSource?

/// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
vsphereVolume: VsphereVirtualDiskVolumeSource?

/// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
fc: FCVolumeSource?

/// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.
///
/// This is generally used for system agents or other privileged things that are allowed to see the host machine.
/// Most containers will NOT need this.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>
hostPath: HostPathVolumeSource?

/// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
class AzureFileVolumeSource {
  /// secretName is the  name of secret that contains Azure Storage Account Name and Key
  secretName: String

  /// readOnly defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  readOnly: Boolean?

  /// shareName is the azure share Name
  shareName: String
}

/// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
class FlexVolumeSource {
  /// driver is the name of the driver to use for this volume.
  driver: String

  /// options is Optional: this field holds extra command options if any.
  options: Mapping<String, String>?

  /// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts.
  ///
  /// This may be empty if no secret object is specified.
  /// If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  secretRef: LocalObjectReference?

  /// readOnly is Optional: defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  readOnly: Boolean?

  /// fsType is the filesystem type to mount.
  ///
  /// Must be a filesystem type supported by the host operating system.
  /// Ex. "ext4", "xfs", "ntfs".
  /// The default filesystem depends on FlexVolume script.
  fsType: String?
}

/// Represents an ephemeral volume that is handled by a normal storage driver.
class EphemeralVolumeSource {
  /// Will be used to create a stand-alone PVC to provision the volume.
  ///
  /// The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.
  /// The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry.
  /// Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
  /// 
  /// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake.
  /// Starting the pod is then blocked until the unrelated PVC is removed.
  /// If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists.
  /// Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
  /// 
  /// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
  /// 
  /// Required, must not be nil.
  volumeClaimTemplate: PersistentVolumeClaimTemplate?

  /// Specifies a read-only configuration for the volume.
  ///
  /// Defaults to false (read/write).
  @K8sVersion { removedIn = "1.21" }
  readOnly: Boolean?
}

/// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
class PersistentVolumeClaimTemplate {
  /// May contain labels and annotations that will be copied into the PVC when creating it.
  ///
  /// No other fields are allowed and will be rejected during validation.
  metadata: ObjectMeta?

  /// The specification for the PersistentVolumeClaim.
  ///
  /// The entire content is copied unchanged into the PVC that gets created from this template.
  /// The same fields as in a PersistentVolumeClaim are also valid here.
  spec: PersistentVolumeClaimSpec
}

/// Adapts a Secret into a volume.
///
/// 
/// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
/// Secret volumes support ownership management and SELinux relabeling.
class SecretVolumeSource {
  /// secretName is the name of the secret in the pod's namespace to use.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>
  secretName: String?

  /// defaultMode is Optional: mode bits used to set permissions on created files by default.
  ///
  /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// Defaults to 0644.
  /// Directories within the path are not affected by this setting.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  defaultMode: Int(isBetween(0, 511))?

  /// optional field specify whether the Secret or its keys must be defined
  optional: Boolean?

  /// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value.
  ///
  /// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
  /// If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional.
  /// Paths must be relative and may not contain the '..' path or start with '..'.
  items: Listing<KeyToPath>?
}

/// Maps a string key to a path within a volume.
class KeyToPath {
  /// mode is Optional: mode bits used to set permissions on this file.
  ///
  /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// If not specified, the volume defaultMode will be used.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  mode: Int(isBetween(0, 511))?

  /// path is the relative path of the file to map the key to.
  ///
  /// May not be an absolute path.
  /// May not contain the path element '..'.
  /// May not start with the string '..'.
  path: String

  /// key is the key to project.
  key: String
}

/// Represents a projected volume source
class ProjectedVolumeSource {
  /// sources is the list of volume projections
  sources: Listing<VolumeProjection>?

  /// defaultMode are the mode bits used to set permissions on created files by default.
  ///
  /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// Directories within the path are not affected by this setting.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  defaultMode: Int(isBetween(0, 511))?
}

/// Projection that may be projected along with other supported volume types
class VolumeProjection {
  /// downwardAPI information about the downwardAPI data to project
  downwardAPI: DownwardAPIProjection?

  /// configMap information about the configMap data to project
  configMap: ConfigMapProjection?

  /// secret information about the secret data to project
  secret: SecretProjection?

  /// serviceAccountToken is information about the serviceAccountToken data to project
  serviceAccountToken: ServiceAccountTokenProjection?

  /// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.
  ///
  /// 
  /// Alpha, gated by the ClusterTrustBundleProjection feature gate.
  /// 
  /// ClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.
  /// 
  /// Kubelet performs aggressive normalization of the PEM contents written into the pod filesystem.
  /// Esoteric PEM features such as inter-block comments and block headers are stripped.
  /// Certificates are deduplicated.
  /// The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.
  @K8sVersion { introducedIn = "1.29" }
  clusterTrustBundle: ClusterTrustBundleProjection?
}

/// Represents downward API info for projecting into a projected volume.
///
/// Note that this is identical to a downwardAPI volume source without the default mode.
class DownwardAPIProjection {
  /// Items is a list of DownwardAPIVolume file
  items: Listing<DownwardAPIVolumeFile>?
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
class DownwardAPIVolumeFile {
  /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  ///
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// If not specified, the volume defaultMode will be used.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  mode: Int(isBetween(0, 511))?

  /// Required: Path is  the relative path name of the file to be created.
  ///
  /// Must not be absolute or contain the '..' path.
  /// Must be utf-8 encoded.
  /// The first item of the relative path must not start with '..'
  path: String

  /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  resourceFieldRef: ResourceFieldSelector?

  /// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
  fieldRef: ObjectFieldSelector?
}

/// Adapts a ConfigMap into a projected volume.
///
/// 
/// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
/// Note that this is identical to a configmap volume source without the default mode.
class ConfigMapProjection {
  /// Name of the referent.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String?

  /// optional specify whether the ConfigMap or its keys must be defined
  optional: Boolean?

  /// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value.
  ///
  /// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
  /// If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional.
  /// Paths must be relative and may not contain the '..' path or start with '..'.
  items: Listing<KeyToPath>?
}

/// Adapts a secret into a projected volume.
///
/// 
/// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names.
/// Note that this is identical to a secret volume source without the default mode.
class SecretProjection {
  /// Name of the referent.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String?

  /// optional field specify whether the Secret or its key must be defined
  optional: Boolean?

  /// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value.
  ///
  /// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
  /// If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional.
  /// Paths must be relative and may not contain the '..' path or start with '..'.
  items: Listing<KeyToPath>?
}

/// ServiceAccountTokenProjection represents a projected service account token volume.
///
/// This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
class ServiceAccountTokenProjection {
  /// path is the path relative to the mount point of the file to project the token into.
  path: String

  /// audience is the intended audience of the token.
  ///
  /// A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token.
  /// The audience defaults to the identifier of the apiserver.
  audience: String?

  /// expirationSeconds is the requested duration of validity of the service account token.
  ///
  /// As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token.
  /// The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
  expirationSeconds: Int?
}

/// ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
class ClusterTrustBundleProjection {
  /// Relative path from the volume root to write the bundle.
  path: String

  /// Select all ClusterTrustBundles that match this label selector.
  ///
  /// Only has effect if signerName is set.
  /// Mutually-exclusive with name.
  /// If unset, interpreted as "match nothing".
  /// If set but empty, interpreted as "match everything".
  labelSelector: LabelSelector?

  /// Select a single ClusterTrustBundle by object name.
  ///
  /// Mutually-exclusive with signerName and labelSelector.
  name: String?

  /// If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.
  ///
  /// If using name, then the named ClusterTrustBundle is allowed not to exist.
  /// If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
  optional: Boolean?

  /// Select all ClusterTrustBundles that match this signer name.
  ///
  /// Mutually-exclusive with name.
  /// The contents of all selected ClusterTrustBundles will be unified and deduplicated.
  signerName: String?
}

/// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
class CephFSVolumeSource {
  /// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  path: String?

  /// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
  ///
  /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
  secretRef: LocalObjectReference?

  /// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
  secretFile: String?

  /// readOnly is Optional: Defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
  readOnly: Boolean?

  /// user is optional: User is the rados user name, default is admin More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
  user: String?

  /// monitors is Required: Monitors is a collection of Ceph monitors More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
  monitors: Listing<String>
}

/// ScaleIOVolumeSource represents a persistent ScaleIO volume
class ScaleIOVolumeSource {
  /// system is the name of the storage system as configured in ScaleIO.
  system: String

  /// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  protectionDomain: String?

  /// sslEnabled Flag enable/disable SSL communication with Gateway, default false
  sslEnabled: Boolean?

  /// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
  ///
  /// Default is ThinProvisioned.
  storageMode: String?

  /// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  volumeName: String?

  /// secretRef references to the secret for ScaleIO user and other sensitive information.
  ///
  /// If this is not provided, Login operation will fail.
  secretRef: LocalObjectReference

  /// readOnly Defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  readOnly: Boolean?

  /// fsType is the filesystem type to mount.
  ///
  /// Must be a filesystem type supported by the host operating system.
  /// Ex. "ext4", "xfs", "ntfs".
  /// Default is "xfs".
  fsType: String?

  /// storagePool is the ScaleIO Storage Pool associated with the protection domain.
  storagePool: String?

  /// gateway is the host address of the ScaleIO API Gateway.
  gateway: String
}

/// Represents an empty directory for a pod.
///
/// Empty directory volumes support ownership management and SELinux relabeling.
class EmptyDirVolumeSource {
  /// sizeLimit is the total amount of local storage required for this EmptyDir volume.
  ///
  /// The size limit is also applicable for memory medium.
  /// The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod.
  /// The default is nil which means that the limit is undefined.
  /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
  sizeLimit: Quantity?

  /// medium represents what type of storage medium should back this directory.
  ///
  /// The default is "" which means to use the node's default medium.
  /// Must be an empty string (default) or Memory.
  /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
  medium: String?
}

/// Represents a Glusterfs mount that lasts the lifetime of a pod.
///
/// Glusterfs volumes do not support ownership management or SELinux relabeling.
class GlusterfsVolumeSource {
  /// path is the Glusterfs volume path.
  ///
  /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
  path: String

  /// endpoints is the endpoint name that details Glusterfs topology.
  ///
  /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
  endpoints: String

  /// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
  ///
  /// Defaults to false.
  /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
  readOnly: Boolean?
}

/// Represents a cinder volume resource in Openstack.
///
/// A Cinder volume must exist before mounting to a container.
/// The volume must also be in the same region as the kubelet.
/// Cinder volumes support ownership management and SELinux relabeling.
class CinderVolumeSource {
  /// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
  secretRef: LocalObjectReference?

  /// volumeID used to identify the volume in cinder.
  ///
  /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
  volumeID: String

  /// readOnly defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
  readOnly: Boolean?

  /// fsType is the filesystem type to mount.
  ///
  /// Must be a filesystem type supported by the host operating system.
  /// Examples: "ext4", "xfs", "ntfs".
  /// Implicitly inferred to be "ext4" if unspecified.
  /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
  fsType: String?
}

/// DownwardAPIVolumeSource represents a volume containing downward API info.
///
/// Downward API volumes support ownership management and SELinux relabeling.
class DownwardAPIVolumeSource {
  /// Optional: mode bits to use on created files by default.
  ///
  /// Must be a Optional: mode bits used to set permissions on created files by default.
  /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// Defaults to 0644.
  /// Directories within the path are not affected by this setting.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  defaultMode: Int(isBetween(0, 511))?

  /// Items is a list of downward API volume file
  items: Listing<DownwardAPIVolumeFile>?
}

/// Represents an ISCSI disk.
///
/// ISCSI volumes can only be mounted as read/write once.
/// ISCSI volumes support ownership management and SELinux relabeling.
class ISCSIVolumeSource {
  /// chapAuthSession defines whether support iSCSI Session CHAP authentication
  chapAuthSession: Boolean?

  /// iscsiInterface is the interface Name that uses an iSCSI transport.
  ///
  /// Defaults to 'default' (tcp).
  iscsiInterface: String?

  /// lun represents iSCSI Target Lun number.
  lun: Int32

  /// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  chapAuthDiscovery: Boolean?

  /// iqn is the target iSCSI Qualified Name.
  iqn: String

  /// portals is the iSCSI Target Portal List.
  ///
  /// The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  portals: Listing<String>?

  /// secretRef is the CHAP Secret for iSCSI target and initiator authentication
  secretRef: LocalObjectReference?

  /// initiatorName is the custom iSCSI Initiator Name.
  ///
  /// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  initiatorName: String?

  /// readOnly here will force the ReadOnly setting in VolumeMounts.
  ///
  /// Defaults to false.
  readOnly: Boolean?

  /// fsType is the filesystem type of the volume that you want to mount.
  ///
  /// Tip: Ensure that the filesystem type is supported by the host operating system.
  /// Examples: "ext4", "xfs", "ntfs".
  /// Implicitly inferred to be "ext4" if unspecified.
  /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#iscsi>
  fsType: String?

  /// targetPortal is iSCSI Target Portal.
  ///
  /// The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  targetPortal: String
}

/// Represents a Rados Block Device mount that lasts the lifetime of a pod.
///
/// RBD volumes support ownership management and SELinux relabeling.
class RBDVolumeSource {
  /// image is the rados image name.
  ///
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  image: String

  /// pool is the rados pool name.
  ///
  /// Default is rbd.
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  pool: String?

  /// secretRef is name of the authentication secret for RBDUser.
  ///
  /// If provided overrides keyring.
  /// Default is nil.
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  secretRef: LocalObjectReference?

  /// readOnly here will force the ReadOnly setting in VolumeMounts.
  ///
  /// Defaults to false.
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  readOnly: Boolean?

  /// fsType is the filesystem type of the volume that you want to mount.
  ///
  /// Tip: Ensure that the filesystem type is supported by the host operating system.
  /// Examples: "ext4", "xfs", "ntfs".
  /// Implicitly inferred to be "ext4" if unspecified.
  /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#rbd>
  fsType: String?

  /// keyring is the path to key ring for RBDUser.
  ///
  /// Default is /etc/ceph/keyring.
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  keyring: String?

  /// user is the rados user name.
  ///
  /// Default is admin.
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  user: String?

  /// monitors is a collection of Ceph monitors.
  ///
  /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
  monitors: Listing<String>
}

/// Adapts a ConfigMap into a volume.
///
/// 
/// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
/// ConfigMap volumes support ownership management and SELinux relabeling.
class ConfigMapVolumeSource {
  /// defaultMode is optional: mode bits used to set permissions on created files by default.
  ///
  /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
  /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
  /// Defaults to 0644.
  /// Directories within the path are not affected by this setting.
  /// This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  defaultMode: Int(isBetween(0, 511))?

  /// Name of the referent.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String?

  /// optional specify whether the ConfigMap or its keys must be defined
  optional: Boolean?

  /// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value.
  ///
  /// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
  /// If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional.
  /// Paths must be relative and may not contain the '..' path or start with '..'.
  items: Listing<KeyToPath>?
}

/// Represents a StorageOS persistent volume resource.
class StorageOSVolumeSource {
  /// volumeNamespace specifies the scope of the volume within StorageOS.
  ///
  /// If no namespace is specified then the Pod's namespace will be used.
  /// This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
  /// Set VolumeName to any name to override the default behaviour.
  /// Set to "default" if you are not using namespaces within StorageOS.
  /// Namespaces that do not pre-exist within StorageOS will be created.
  volumeNamespace: String?

  /// volumeName is the human-readable name of the StorageOS volume.
  ///
  /// Volume names are only unique within a namespace.
  volumeName: String?

  /// secretRef specifies the secret to use for obtaining the StorageOS API credentials.
  ///
  /// If not specified, default values will be attempted.
  secretRef: LocalObjectReference?

  /// readOnly defaults to false (read/write).
  ///
  /// ReadOnly here will force the ReadOnly setting in VolumeMounts.
  readOnly: Boolean?

  /// fsType is the filesystem type to mount.
  ///
  /// Must be a filesystem type supported by the host operating system.
  /// Ex. "ext4", "xfs", "ntfs".
  /// Implicitly inferred to be "ext4" if unspecified.
  fsType: String?
}

/// Represents a source location of a volume to mount, managed by an external CSI driver
class CSIVolumeSource {
  /// driver is the name of the CSI driver that handles this volume.
  ///
  /// Consult with your admin for the correct name as registered in the cluster.
  driver: String

  /// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
  ///
  /// This field is optional, and  may be empty if no secret is required.
  /// If the secret object contains more than one secret, all secret references are passed.
  nodePublishSecretRef: LocalObjectReference?

  /// readOnly specifies a read-only configuration for the volume.
  ///
  /// Defaults to false (read/write).
  readOnly: Boolean?

  /// fsType to mount.
  ///
  /// Ex. "ext4", "xfs", "ntfs".
  /// If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
  fsType: String?

  /// volumeAttributes stores driver-specific properties that are passed to the CSI driver.
  ///
  /// Consult your driver's documentation for supported values.
  volumeAttributes: Mapping<String, String>?
}

/// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
///
/// This volume finds the bound PV and mounts that volume for the pod.
/// A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
class PersistentVolumeClaimVolumeSource {
  /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
  claimName: String

  /// readOnly Will force the ReadOnly setting in VolumeMounts.
  ///
  /// Default false.
  readOnly: Boolean?
}

/// Represents a volume that is populated with the contents of a git repository.
///
/// Git repo volumes do not support ownership management.
/// Git repo volumes support SELinux relabeling.
/// 
/// DEPRECATED: GitRepo is deprecated.
/// To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
@Deprecated
class GitRepoVolumeSource {
  /// repository is the URL
  repository: String

  /// directory is the target directory name.
  ///
  /// Must not contain or start with '..'.
  /// If '.' is supplied, the volume directory will be the git repository.
  /// Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  directory: String?

  /// revision is the commit hash for the specified revision.
  revision: String?
}

