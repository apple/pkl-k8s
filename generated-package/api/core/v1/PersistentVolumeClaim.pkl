//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// PersistentVolumeClaim is a user's request for and claim to a persistent volume
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.core.v1.PersistentVolumeClaim

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/PersistentVolumeClaimSpec.pkl"

fixed apiVersion: "v1"

fixed kind: "PersistentVolumeClaim"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec defines the desired characteristics of a volume requested by a pod author.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
spec: PersistentVolumeClaimSpec?

/// status represents the current information/status of a persistent volume claim.
///
/// Read-only.
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
status: PersistentVolumeClaimStatus?

/// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
class PersistentVolumeClaimStatus {
  /// phase represents the current phase of PersistentVolumeClaim.
  phase: String?

  /// allocatedResources tracks the resources allocated to a PVC including its capacity.
  ///
  /// Key names follow standard Kubernetes label syntax.
  /// Valid values are either:
  /// 	* Un-prefixed keys:
  /// 		- storage - the capacity of the volume.
  /// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
  /// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
  /// 
  /// Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested.
  /// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
  /// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
  /// If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
  /// 
  /// A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed.
  /// For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
  /// 
  /// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  @K8sVersion { introducedIn = "1.23" }
  allocatedResources: Mapping<String, Quantity>?

  /// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
  ///
  /// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
  @K8sVersion { introducedIn = "1.29" }
  currentVolumeAttributesClassName: String?

  /// allocatedResourceStatuses stores status of resource being resized for the given PVC.
  ///
  /// Key names follow standard Kubernetes label syntax.
  /// Valid values are either:
  /// 	* Un-prefixed keys:
  /// 		- storage - the capacity of the volume.
  /// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
  /// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
  /// 
  /// ClaimResourceStatus can be in any of following states:
  /// 	- ControllerResizeInProgress:
  /// 		State set when resize controller starts resizing the volume in control-plane.
  /// 	- ControllerResizeFailed:
  /// 		State set when resize has failed in resize controller with a terminal error.
  /// 	- NodeResizePending:
  /// 		State set when resize controller has finished resizing the volume but further resizing of
  /// 		volume is needed on the node.
  /// 	- NodeResizeInProgress:
  /// 		State set when kubelet starts resizing the volume.
  /// 	- NodeResizeFailed:
  /// 		State set when resizing has failed in kubelet with a terminal error.
  /// Transient errors don't set
  /// 		NodeResizeFailed.
  /// For example: if expanding a PVC for more capacity - this field can be one of the following states:
  /// 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
  ///      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
  ///      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
  ///      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
  ///      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
  /// When this field is not set, it means that no resize operation is in progress for the given PVC.
  /// 
  /// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed.
  /// For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
  /// 
  /// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  @K8sVersion { introducedIn = "1.28" }
  allocatedResourceStatuses: Mapping<String, String>?

  /// accessModes contains the actual access modes the volume backing the PVC has.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>
  accessModes: Listing<String>?

  /// conditions is the current Condition of persistent volume claim.
  ///
  /// If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.
  conditions: Listing<PersistentVolumeClaimCondition>?

  /// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
  ///
  /// When this is unset, there is no ModifyVolume operation being attempted.
  /// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
  @K8sVersion { introducedIn = "1.29" }
  modifyVolumeStatus: ModifyVolumeStatus?

  /// capacity represents the actual resources of the underlying volume.
  capacity: Mapping<String, Quantity>?

  /// resizeStatus stores status of resize operation.
  ///
  /// ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet.
  /// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  @K8sVersion { introducedIn = "1.23"; removedIn = "1.28" }
  resizeStatus: String?
}

/// PersistentVolumeClaimCondition contains details about state of pvc
class PersistentVolumeClaimCondition {
  /// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition.
  ///
  /// If it reports "Resizing" that means the underlying persistent volume is being resized.
  reason: String?

  /// lastTransitionTime is the time the condition transitioned from one status to another.
  lastTransitionTime: Time?

  /// message is the human-readable message indicating details about last transition.
  message: String?

  /// Type is the type of the condition.
  ///
  /// More info: <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about>
  type: "FileSystemResizePending"|"Resizing"

  /// lastProbeTime is the time we probed the condition.
  lastProbeTime: Time?

  /// Status is the status of the condition.
  ///
  /// Can be True, False, Unknown.
  /// More info: <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required>
  status: String
}

/// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
class ModifyVolumeStatus {
  /// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
  targetVolumeAttributesClassName: String?

  /// status is the status of the ControllerModifyVolume operation.
  ///
  /// It can be in any of following states:
  ///  - Pending
  ///    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
  ///    the specified VolumeAttributesClass not existing.
  ///  - InProgress
  ///    InProgress indicates that the volume is being modified.
  ///  - Infeasible
  ///   Infeasible indicates that the request has been rejected as invalid by the CSI driver.
  /// To
  /// 	  resolve the error, a valid VolumeAttributesClass needs to be specified.
  /// Note: New statuses can be added in the future.
  /// Consumers should check for unknown statuses and fail appropriately.
  status: String
}

