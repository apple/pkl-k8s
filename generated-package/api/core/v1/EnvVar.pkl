//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// EnvVar represents an environment variable present in a Container.
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.core.v1.EnvVar

extends ".../K8sObject.pkl"

import ".../api/core/v1/ResourceFieldSelector.pkl"
import ".../api/core/v1/ObjectFieldSelector.pkl"

/// Name of the environment variable.
///
/// Must be a C_IDENTIFIER.
name: String

/// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables.
///
/// If a variable cannot be resolved, the reference in the input string will be unchanged.
/// Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
/// Escaped references will never be expanded, regardless of whether the variable exists or not.
/// Defaults to "".
value: String?

/// Source for the environment variable's value.
///
/// Cannot be used if value is not empty.
valueFrom: EnvVarSource?

/// EnvVarSource represents a source for the value of an EnvVar.
class EnvVarSource {
  /// Selects a key of a secret in the pod's namespace
  secretKeyRef: SecretKeySelector?

  /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
  resourceFieldRef: ResourceFieldSelector?

  /// Selects a key of a ConfigMap.
  configMapKeyRef: ConfigMapKeySelector?

  /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
  fieldRef: ObjectFieldSelector?
}

/// SecretKeySelector selects a key of a Secret.
class SecretKeySelector {
  /// Name of the referent.
  ///
  /// This field is effectively required, but due to backwards compatibility is allowed to be empty.
  /// Instances of this type with an empty value here are almost certainly wrong.
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String?

  /// Specify whether the Secret or its key must be defined
  optional: Boolean?

  /// The key of the secret to select from.
  ///
  /// Must be a valid secret key.
  key: String
}

/// Selects a key from a ConfigMap.
class ConfigMapKeySelector {
  /// Name of the referent.
  ///
  /// This field is effectively required, but due to backwards compatibility is allowed to be empty.
  /// Instances of this type with an empty value here are almost certainly wrong.
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String?

  /// Specify whether the ConfigMap or its key must be defined
  optional: Boolean?

  /// The key to select.
  key: String
}

