//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.core.v1.Probe

extends ".../K8sObject.pkl"

import ".../api/core/v1/TCPSocketAction.pkl"
import ".../api/core/v1/ExecAction.pkl"
import ".../api/core/v1/HTTPGetAction.pkl"

/// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
///
/// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal.
/// Set this value longer than the expected cleanup time for your process.
/// If this value is nil, the pod's terminationGracePeriodSeconds will be used.
/// Otherwise, this value overrides the value provided by the pod spec.
/// Value must be non-negative integer.
/// The value zero indicates stop immediately via the kill signal (no opportunity to shut down).
/// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
/// Minimum value is 1.
/// spec.terminationGracePeriodSeconds is used if unset.
@K8sVersion { introducedIn = "1.21" }
terminationGracePeriodSeconds: Int?

/// Minimum consecutive failures for the probe to be considered failed after having succeeded.
///
/// Defaults to 3.
/// Minimum value is 1.
failureThreshold: Int32?

/// How often (in seconds) to perform the probe.
///
/// Default to 10 seconds.
/// Minimum value is 1.
periodSeconds: Int32?

/// TCPSocket specifies an action involving a TCP port.
tcpSocket: TCPSocketAction?

/// Number of seconds after which the probe times out.
///
/// Defaults to 1 second.
/// Minimum value is 1.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
timeoutSeconds: Int32?

/// Minimum consecutive successes for the probe to be considered successful after having failed.
///
/// Defaults to 1.
/// Must be 1 for liveness and startup.
/// Minimum value is 1.
successThreshold: Int32?

/// Number of seconds after the container has started before liveness probes are initiated.
///
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
initialDelaySeconds: Int32?

/// Exec specifies the action to take.
exec: ExecAction?(module.exactlyOneSet4(this, httpGet, tcpSocket, grpc))

/// GRPC specifies an action involving a GRPC port.
@K8sVersion { introducedIn = "1.23" }
grpc: GRPCAction?

/// HTTPGet specifies the http request to perform.
httpGet: HTTPGetAction?

class GRPCAction {
  /// Port number of the gRPC service.
  ///
  /// Number must be in the range 1 to 65535.
  port: Int32

  /// Service is the name of the service to place in the gRPC HealthCheckRequest (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
  ///
  /// 
  /// If this is not specified, the default behavior is defined by gRPC.
  service: String?
}

