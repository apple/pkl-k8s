//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.core.v1.PersistentVolumeClaimSpec

extends ".../K8sObject.pkl"

import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"
import ".../api/core/v1/TypedLocalObjectReference.pkl"

/// storageClassName is the name of the StorageClass required by the claim.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>
storageClassName: String?

/// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired.
///
/// This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object.
/// When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
/// This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value.
/// For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
/// When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty.
/// There are three important differences between dataSource and dataSourceRef:
/// * While dataSource only allows two specific types of objects, dataSourceRef
///   allows any non-core object, as well as PersistentVolumeClaim objects.
/// * While dataSource ignores disallowed values (dropping them), dataSourceRef
///   preserves all values, and generates an error if a disallowed value is
///   specified.
/// * While dataSource only allows local objects, dataSourceRef allows objects
///   in any namespaces.
/// (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
/// (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
@K8sVersion { introducedIn = "1.22" }
dataSourceRef: TypedObjectReference?

/// volumeName is the binding reference to the PersistentVolume backing this claim.
volumeName: String?

/// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
///
/// If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass.
/// This has a different purpose than storageClassName, it can be changed after the claim is created.
/// An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
/// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists.
/// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists.
/// More info: <https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/> (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
@K8sVersion { introducedIn = "1.29" }
volumeAttributesClassName: String?

/// resources represents the minimum resources the volume should have.
///
/// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim.
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>
resources: VolumeResourceRequirements?

/// selector is a label query over volumes to consider for binding.
selector: LabelSelector?

/// accessModes contains the desired access modes the volume should have.
///
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>
accessModes: Listing<String>?

/// dataSource field can be used to specify either:
///
/// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
/// * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
/// When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
/// If the namespace is specified, then dataSourceRef will not be copied to dataSource.
dataSource: TypedLocalObjectReference?

/// volumeMode defines what type of volume is required by the claim.
///
/// Value of Filesystem is implied when not included in claim spec.
volumeMode: String?

class TypedObjectReference {
  /// APIGroup is the group for the resource being referenced.
  ///
  /// If APIGroup is not specified, the specified Kind must be in the core API group.
  /// For any other third-party types, APIGroup is required.
  apiGroup: String?

  /// Kind is the type of resource being referenced
  kind: String

  /// Name is the name of resource being referenced
  name: String

  /// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference.
  ///
  /// See the ReferenceGrant documentation for details.
  /// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  namespace: String?
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
class VolumeResourceRequirements {
  /// Requests describes the minimum amount of compute resources required.
  ///
  /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.
  /// Requests cannot exceed Limits.
  /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
  requests: Mapping<String, Quantity>?

  /// Limits describes the maximum amount of compute resources allowed.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
  limits: Mapping<String, Quantity>?
}

