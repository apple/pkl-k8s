//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// StatefulSet represents a set of pods with consistent identities.
///
/// Identities are defined as:
///   - Network: A single stable DNS and hostname.
///   - Storage: As many VolumeClaims as requested.
/// 
/// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.apps.v1.StatefulSet

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/PodTemplateSpec.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"
import ".../api/core/v1/PersistentVolumeClaim.pkl"

fixed apiVersion: "apps/v1"

fixed kind: "StatefulSet"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Spec defines the desired identities of pods in this set.
spec: StatefulSetSpec?

/// Status is the current status of Pods in this StatefulSet.
///
/// This data may be out of date by some window of time.
status: StatefulSetStatus?

/// A StatefulSetSpec is the specification of a StatefulSet.
class StatefulSetSpec {
  /// template is the object that describes the pod that will be created if insufficient replicas are detected.
  ///
  /// Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
  /// Each pod will be named with the format <statefulsetname>-<podindex>.
  /// For example, a pod in a StatefulSet named "web" with index number "3" would be named "web-3".
  /// The only allowed template.spec.restartPolicy value is "Always".
  template: PodTemplateSpec

  /// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down.
  ///
  /// The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing.
  /// When scaling down, the pods are removed in the opposite order.
  /// The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
  podManagementPolicy: String?

  /// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
  updateStrategy: StatefulSetUpdateStrategy?

  /// replicas is the desired number of replicas of the given Template.
  ///
  /// These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity.
  /// If unspecified, defaults to 1.
  replicas: Int32?

  /// ordinals controls the numbering of replica indices in a StatefulSet.
  ///
  /// The default ordinals behavior assigns a "0" index to the first replica and increments the index by one for each additional replica requested.
  @K8sVersion { introducedIn = "1.26" }
  ordinals: StatefulSetOrdinals?

  /// persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates.
  ///
  /// By default, all persistent volume claims are created as needed and retained until manually deleted.
  /// This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down.
  @K8sVersion { introducedIn = "1.23" }
  persistentVolumeClaimRetentionPolicy: StatefulSetPersistentVolumeClaimRetentionPolicy?

  /// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history.
  ///
  /// The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version.
  /// The default value is 10.
  revisionHistoryLimit: Int32?

  /// selector is a label query over pods that should match the replica count.
  ///
  /// It must match the pod template's labels.
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>
  selector: LabelSelector

  /// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available.
  ///
  /// Defaults to 0 (pod will be considered available as soon as it is ready)
  @K8sVersion { introducedIn = "1.22" }
  minReadySeconds: Int32?

  /// serviceName is the name of the service that governs this StatefulSet.
  ///
  /// This service must exist before the StatefulSet, and is responsible for the network identity of the set.
  /// Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
  serviceName: String

  /// volumeClaimTemplates is a list of claims that pods are allowed to reference.
  ///
  /// The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod.
  /// Every claim in this list must have at least one matching (by name) volumeMount in one container in the template.
  /// A claim in this list takes precedence over any volumes in the template, with the same name.
  volumeClaimTemplates: Listing<PersistentVolumeClaim>?
}

/// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates.
///
/// It includes any additional parameters necessary to perform the update for the indicated strategy.
class StatefulSetUpdateStrategy {
  /// Type indicates the type of the StatefulSetUpdateStrategy.
  ///
  /// Default is RollingUpdate.
  type: String?

  /// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
  rollingUpdate: RollingUpdateStatefulSetStrategy?
}

/// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
class RollingUpdateStatefulSetStrategy {
  /// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates.
  ///
  /// During a rolling update, all pods from ordinal Replicas-1 to Partition are updated.
  /// All pods from ordinal Partition-1 to 0 remain untouched.
  /// This is helpful in being able to do a canary based deployment.
  /// The default value is 0.
  partition: Int32?

  /// The maximum number of pods that can be unavailable during the update.
  ///
  /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
  /// Absolute number is calculated from percentage by rounding up.
  /// This can not be 0.
  /// Defaults to 1.
  /// This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature.
  /// The field applies to all pods in the range 0 to Replicas-1.
  /// That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
  @K8sVersion { introducedIn = "1.24" }
  maxUnavailable: (Int|String)?
}

/// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
class StatefulSetOrdinals {
  /// start is the number representing the first replica's index.
  ///
  /// It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another.
  /// If set, replica indices will be in the range:
  ///   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
  /// If unset, defaults to 0.
  /// Replica indices will be in the range:
  ///   [0, .spec.replicas).
  start: Int32?
}

/// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
class StatefulSetPersistentVolumeClaimRetentionPolicy {
  /// WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down.
  ///
  /// The default policy of `Retain` causes PVCs to not be affected by a scaledown.
  /// The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
  whenScaled: String?

  /// WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted.
  ///
  /// The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion.
  /// The `Delete` policy causes those PVCs to be deleted.
  whenDeleted: String?
}

/// StatefulSetStatus represents the current state of a StatefulSet.
class StatefulSetStatus {
  /// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
  currentRevision: String?

  /// replicas is the number of Pods created by the StatefulSet controller.
  replicas: Int32

  /// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
  updateRevision: String?

  /// readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
  readyReplicas: Int32?

  /// collisionCount is the count of hash collisions for the StatefulSet.
  ///
  /// The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
  collisionCount: Int32?

  /// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
  currentReplicas: Int32?

  /// Represents the latest available observations of a statefulset's current state.
  conditions: Listing<StatefulSetCondition>?

  /// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
  updatedReplicas: Int32?

  /// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
  @K8sVersion { introducedIn = "1.22" }
  availableReplicas: Int32?

  /// observedGeneration is the most recent generation observed for this StatefulSet.
  ///
  /// It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
  observedGeneration: Int?
}

/// StatefulSetCondition describes the state of a statefulset at a certain point.
class StatefulSetCondition {
  /// The reason for the condition's last transition.
  reason: String?

  /// Last time the condition transitioned from one status to another.
  lastTransitionTime: Time?

  /// A human readable message indicating details about the transition.
  message: String?

  /// Type of statefulset condition.
  type: String

  /// Status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"
}

