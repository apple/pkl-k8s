//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Storage version of a specific resource.
@K8sVersion { introducedIn = "1.20" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.apiserverinternal.v1alpha1.StorageVersion

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "internal.apiserver.k8s.io/v1alpha1"

fixed kind: "StorageVersion"

/// The name is <group>.<resource>.
metadata: ObjectMeta?

/// Spec is an empty spec.
///
/// It is here to comply with Kubernetes API style.
spec: StorageVersionSpec

/// API server instances report the version they can decode and the version they encode objects to when persisting objects in the backend.
status: StorageVersionStatus

/// StorageVersionSpec is an empty spec.
class StorageVersionSpec {
}

/// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
class StorageVersionStatus {
  /// If all API server instances agree on the same encoding storage version, then this field is set to that version.
  ///
  /// Otherwise this field is left empty.
  /// API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
  commonEncodingVersion: String?

  /// The latest available observations of the storageVersion's state.
  conditions: Listing<StorageVersionCondition>?

  /// The reported versions per API server instance.
  storageVersions: Listing<ServerStorageVersion>?
}

/// Describes the state of the storageVersion at a certain point.
class StorageVersionCondition {
  /// The reason for the condition's last transition.
  reason: String

  /// Last time the condition transitioned from one status to another.
  lastTransitionTime: Time?

  /// A human readable message indicating details about the transition.
  message: String

  /// Type of the condition.
  type: String

  /// If set, this represents the .metadata.generation that the condition was set based upon.
  observedGeneration: Int?

  /// Status of the condition, one of True, False, Unknown.
  status: String
}

/// An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
class ServerStorageVersion {
  /// The ID of the reporting API server.
  apiServerID: String?

  /// The API server can decode objects encoded in these versions.
  ///
  /// The encodingVersion must be included in the decodableVersions.
  decodableVersions: Listing<String>?

  /// The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
  encodingVersion: String?

  /// The API server can serve these versions.
  ///
  /// DecodableVersions must include all ServedVersions.
  @K8sVersion { introducedIn = "1.28" }
  servedVersions: Listing<String>?
}

