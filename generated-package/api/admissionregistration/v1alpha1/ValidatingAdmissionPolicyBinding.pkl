//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources.
///
/// ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
/// 
/// For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.
/// 
/// The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
/// Each evaluation of the policy is given an independent CEL cost budget.
/// Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
@K8sVersion { introducedIn = "1.26"; removedIn = "1.32" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"
import ".../api/admissionregistration/v1alpha1/MatchResources.pkl"

fixed apiVersion: "admissionregistration.k8s.io/v1alpha1"

fixed kind: "ValidatingAdmissionPolicyBinding"

/// Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.>
metadata: ObjectMeta?

/// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
spec: ValidatingAdmissionPolicyBindingSpec?

/// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
class ValidatingAdmissionPolicyBindingSpec {
  /// paramRef specifies the parameter resource used to configure the admission control policy.
  ///
  /// It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy.
  /// If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
  /// If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.
  paramRef: ParamRef?

  /// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to.
  ///
  /// If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
  policyName: String

  /// MatchResources declares what resources match this binding and will be validated by it.
  ///
  /// Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this.
  /// If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching.
  /// If a resource is matched by the other fields of this object, it will be validated.
  /// Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
  matchResources: MatchResources?

  /// validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced.
  ///
  /// If a validation evaluates to false it is always enforced according to these actions.
  /// 
  /// Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored.
  /// This includes compilation errors, runtime errors and misconfigurations of the policy.
  /// 
  /// validationActions is declared as a set of action values.
  /// Order does not matter.
  /// validationActions may not contain duplicates of the same action.
  /// 
  /// The supported actions values are:
  /// 
  /// "Deny" specifies that a validation failure results in a denied request.
  /// 
  /// "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299.
  /// Warnings can be sent both for allowed or denied admission responses.
  /// 
  /// "Audit" specifies that a validation failure is included in the published audit event for the request.
  /// The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid value", {"policy": "policy.example.com", {"binding": "policybinding.example.com", {"expressionIndex": "1", {"validationActions": ["Audit"]}]"`
  /// 
  /// Clients should expect to handle additional values by ignoring any values not recognized.
  /// 
  /// "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
  /// 
  /// Required.
  @K8sVersion { introducedIn = "1.27" }
  validationActions: Listing<String>
}

/// ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
class ParamRef {
  /// `name` is the name of the resource being referenced.
  ///
  /// 
  /// `name` and `selector` are mutually exclusive properties.
  /// If one is set, the other must be unset.
  name: String?

  /// namespace is the namespace of the referenced resource.
  ///
  /// Allows limiting the search for params to a specific namespace.
  /// Applies to both `name` and `selector` fields.
  /// 
  /// A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.
  /// 
  /// - If `paramKind` is cluster-scoped, this field MUST be unset.
  /// Setting this field results in a configuration error.
  /// 
  /// - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset.
  /// Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
  namespace: String?

  /// selector can be used to match multiple param objects based on their labels.
  ///
  /// Supply selector: {} to match all resources of the ParamKind.
  /// 
  /// If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.
  /// 
  /// One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties.
  /// If one is set, the other must be unset.
  @K8sVersion { introducedIn = "1.28" }
  selector: LabelSelector?

  /// `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding.
  ///
  /// If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding.
  /// If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.
  /// 
  /// Allowed values are `Allow` or `Deny` Default to `Deny`
  @K8sVersion { introducedIn = "1.28" }
  parameterNotFoundAction: String?
}

