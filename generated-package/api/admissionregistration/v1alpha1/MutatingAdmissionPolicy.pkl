//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// MutatingAdmissionPolicy describes the definition of an admission mutation policy that mutates the object coming into admission chain.
@K8sVersion { introducedIn = "1.32" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicy

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/admissionregistration/v1alpha1/Variable.pkl"
import ".../api/admissionregistration/v1alpha1/ParamKind.pkl"
import ".../api/admissionregistration/v1alpha1/MatchCondition.pkl"
import ".../api/admissionregistration/v1alpha1/MatchResources.pkl"

fixed apiVersion: "admissionregistration.k8s.io/v1alpha1"

fixed kind: "MutatingAdmissionPolicy"

/// Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.>
metadata: ObjectMeta?

/// Specification of the desired behavior of the MutatingAdmissionPolicy.
spec: MutatingAdmissionPolicySpec?

/// MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.
class MutatingAdmissionPolicySpec {
  /// reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation.
  ///
  /// Allowed values are "Never" and "IfNeeded".
  /// 
  /// Never: These mutations will not be called more than once per binding in a single admission evaluation.
  /// 
  /// IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.
  /// Mutations are only reinvoked when mutations change the object after this mutation is invoked.
  /// Required.
  reinvocationPolicy: String

  /// variables contain definitions of variables that can be used in composition of other expressions.
  ///
  /// Each variable is defined as a named CEL expression.
  /// The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.
  /// 
  /// The expression of a variable can refer to other variables defined earlier in the list but not those after.
  /// Thus, variables must be sorted by the order of first appearance and acyclic.
  variables: Listing<Variable>?

  /// mutations contain operations to perform on matching objects.
  ///
  /// mutations may not be empty; a minimum of one mutation is required.
  /// mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy.
  /// The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.
  mutations: Listing<Mutation>?

  /// paramKind specifies the kind of resources used to parameterize this policy.
  ///
  /// If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions.
  /// If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied.
  /// If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.
  paramKind: ParamKind?

  /// matchConditions is a list of conditions that must be met for a request to be validated.
  ///
  /// Match conditions filter requests that have already been matched by the matchConstraints.
  /// An empty list of matchConditions matches all requests.
  /// There are a maximum of 64 match conditions allowed.
  /// 
  /// If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
  /// 
  /// The exact matching logic is (in order):
  ///   1.
  /// If ANY matchCondition evaluates to FALSE, the policy is skipped.
  ///   2.
  /// If ALL matchConditions evaluate to TRUE, the policy is evaluated.
  ///   3.
  /// If any matchCondition evaluates to an error (but none are FALSE):
  ///      - If failurePolicy=Fail, reject the request
  ///      - If failurePolicy=Ignore, the policy is skipped
  matchConditions: Listing<MatchCondition>?

  /// matchConstraints specifies what resources this policy is designed to validate.
  ///
  /// The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints.
  /// However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding.
  /// The CREATE, UPDATE and CONNECT operations are allowed.
  /// The DELETE operation may not be matched.
  /// '*' matches CREATE, UPDATE and CONNECT.
  /// Required.
  matchConstraints: MatchResources

  /// failurePolicy defines how to handle failures for the admission policy.
  ///
  /// Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
  /// 
  /// A policy is invalid if paramKind refers to a non-existent Kind.
  /// A binding is invalid if paramRef.name refers to a non-existent resource.
  /// 
  /// failurePolicy does not define how validations that evaluate to false are handled.
  /// 
  /// Allowed values are Ignore or Fail.
  /// Defaults to Fail.
  failurePolicy: String?
}

/// Mutation specifies the CEL expression which is used to apply the Mutation.
class Mutation {
  /// patchType indicates the patch strategy used.
  ///
  /// Allowed values are "ApplyConfiguration" and "JSONPatch".
  /// Required.
  patchType: String

  /// applyConfiguration defines the desired configuration values of an object.
  ///
  /// The configuration is applied to the admission object using [structured merge diff](<https://github.com/kubernetes-sigs/structured-merge-diff).>
  /// A CEL expression is used to create apply configuration.
  applyConfiguration: ApplyConfiguration?

  /// jsonPatch defines a [JSON patch](<https://jsonpatch.com/)> operation to perform a mutation to the object.
  ///
  /// A CEL expression is used to create the JSON patch.
  jsonPatch: JSONPatch?
}

/// ApplyConfiguration defines the desired configuration values of an object.
class ApplyConfiguration {
  /// expression will be evaluated by CEL to create an apply configuration.
  ///
  /// ref: <https://github.com/google/cel-spec>
  /// 
  /// Apply configurations are declared in CEL using object initialization.
  /// For example, this CEL expression returns an apply configuration to set a single field:
  /// 
  /// 	Object{
  /// 	  spec: Object.spec{
  /// 	    serviceAccountName: "example"
  /// 	  }
  /// 	}
  /// 
  /// Apply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.
  /// 
  /// CEL expressions have access to the object types needed to create apply configurations:
  /// 
  /// - 'Object' - CEL type of the resource object.
  /// - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')
  /// 
  /// CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:
  /// 
  /// - 'object' - The object from the incoming request.
  /// The value is null for DELETE requests.
  /// - 'oldObject' - The existing object.
  /// The value is null for CREATE requests.
  /// - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
  /// - 'params' - Parameter resource referred to by the policy binding being evaluated.
  /// Only populated if the policy has a ParamKind.
  /// - 'namespaceObject' - The namespace object that the incoming object belongs to.
  /// The value is null for cluster-scoped resources.
  /// - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
  ///   For example, a variable named 'foo' can be accessed as 'variables.foo'.
  /// - 'authorizer' - A CEL Authorizer.
  /// May be used to perform authorization checks for the principal (user or service account) of the request.
  ///   See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz>
  /// - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
  ///   request resource.
  /// 
  /// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object.
  /// No other metadata properties are accessible.
  /// 
  /// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
  /// Required.
  expression: String
}

/// JSONPatch defines a JSON Patch.
class JSONPatch {
  /// expression will be evaluated by CEL to create a [JSON patch](<https://jsonpatch.com/).>
  ///
  /// ref: <https://github.com/google/cel-spec>
  /// 
  /// expression must return an array of JSONPatch values.
  /// 
  /// For example, this CEL expression returns a JSON patch to conditionally modify a value:
  /// 
  /// 	  [
  /// 	    JSONPatch{op: "test", path: "/spec/example", value: "Red"},
  /// 	    JSONPatch{op: "replace", path: "/spec/example", value: "Green"}
  /// 	  ]
  /// 
  /// To define an object for the patch value, use Object types.
  /// For example:
  /// 
  /// 	  [
  /// 	    JSONPatch{
  /// 	      op: "add",
  /// 	      path: "/spec/selector",
  /// 	      value: Object.spec.selector{matchLabels: {"environment": "test"}}
  /// 	    }
  /// 	  ]
  /// 
  /// To use strings containing '/' and '~' as JSONPatch path keys, use "jsonpatch.escapeKey".
  /// For example:
  /// 
  /// 	  [
  /// 	    JSONPatch{
  /// 	      op: "add",
  /// 	      path: "/metadata/labels/" + jsonpatch.escapeKey("example.com/environment"),
  /// 	      value: "test"
  /// 	    },
  /// 	  ]
  /// 
  /// CEL expressions have access to the types needed to create JSON patches and objects:
  /// 
  /// - 'JSONPatch' - CEL type of JSON Patch operations.
  /// JSONPatch has the fields 'op', 'from', 'path' and 'value'.
  ///   See [JSON patch](<https://jsonpatch.com/)> for more details.
  /// The 'value' field may be set to any of: string,
  ///   integer, array, map or object.
  /// If set, the 'path' and 'from' fields must be set to a
  ///   [JSON pointer](<https://datatracker.ietf.org/doc/html/rfc6901/)> string, where the 'jsonpatch.escapeKey()' CEL
  ///   function may be used to escape path keys containing '/' and '~'.
  /// - 'Object' - CEL type of the resource object.
  /// - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')
  /// 
  /// CEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:
  /// 
  /// - 'object' - The object from the incoming request.
  /// The value is null for DELETE requests.
  /// - 'oldObject' - The existing object.
  /// The value is null for CREATE requests.
  /// - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
  /// - 'params' - Parameter resource referred to by the policy binding being evaluated.
  /// Only populated if the policy has a ParamKind.
  /// - 'namespaceObject' - The namespace object that the incoming object belongs to.
  /// The value is null for cluster-scoped resources.
  /// - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
  ///   For example, a variable named 'foo' can be accessed as 'variables.foo'.
  /// - 'authorizer' - A CEL Authorizer.
  /// May be used to perform authorization checks for the principal (user or service account) of the request.
  ///   See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz>
  /// - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
  ///   request resource.
  /// 
  /// CEL expressions have access to [Kubernetes CEL function libraries](<https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries)> as well as:
  /// 
  /// - 'jsonpatch.escapeKey' - Performs JSONPatch key escaping.
  /// '~' and  '/' are escaped as '~0' and `~1' respectively).
  /// 
  /// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
  /// Required.
  expression: String
}

