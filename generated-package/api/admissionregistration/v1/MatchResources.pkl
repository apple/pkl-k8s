//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria.
///
/// The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
@K8sVersion { introducedIn = "1.30" }
@ModuleInfo { minPklVersion = "0.25.0" }
module k8s.api.admissionregistration.v1.MatchResources

extends ".../K8sObject.pkl"

import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"

/// matchPolicy defines how the "MatchResources" list is used to match incoming requests.
///
/// Allowed values are "Exact" or "Equivalent".
/// 
/// - Exact: match a request only if it exactly matches a specified rule.
/// For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
/// 
/// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version.
/// For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
/// 
/// Defaults to "Equivalent"
matchPolicy: String?

/// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches.
///
/// The policy cares about an operation if it matches _any_ Rule.
resourceRules: Listing<NamedRuleWithOperations>?

/// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about.
///
/// The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
excludeResourceRules: Listing<NamedRuleWithOperations>?

/// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector.
///
/// If the object itself is a namespace, the matching is performed on object.metadata.labels.
/// If the object is another cluster scoped resource, it never skips the policy.
/// 
/// For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
///   "matchExpressions": [
///     {
///       "key": "runlevel",
///       "operator": "NotIn",
///       "values": [
///         "0",
///         "1"
///       ]
///     }
///   ]
/// }
/// 
/// If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
///   "matchExpressions": [
///     {
///       "key": "environment",
///       "operator": "In",
///       "values": [
///         "prod",
///         "staging"
///       ]
///     }
///   ]
/// }
/// 
/// See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.
/// 
/// Default to the empty LabelSelector, which matches everything.
namespaceSelector: LabelSelector?

/// ObjectSelector decides whether to run the validation based on if the object has matching labels.
///
/// objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector.
/// A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match.
/// Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels.
/// Default to the empty LabelSelector, which matches everything.
objectSelector: LabelSelector?

/// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
class NamedRuleWithOperations {
  /// ResourceNames is an optional white list of names that the rule applies to.
  ///
  /// An empty set means that everything is allowed.
  resourceNames: Listing<String>?

  /// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added.
  ///
  /// If '*' is present, the length of the slice must be one.
  /// Required.
  operations: Listing<String>

  /// APIVersions is the API versions the resources belong to.
  ///
  /// '*' is all versions.
  /// If '*' is present, the length of the slice must be one.
  /// Required.
  apiVersions: Listing<String>

  /// scope specifies the scope of this rule.
  ///
  /// Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule.
  /// Namespace API objects are cluster-scoped.
  /// "Namespaced" means that only namespaced resources will match this rule.
  /// "*" means that there are no scope restrictions.
  /// Subresources match the scope of their parent resource.
  /// Default is "*".
  scope: String?

  /// Resources is a list of resources this rule applies to.
  ///
  /// 
  /// For example: 'pods' means pods.
  /// 'pods/log' means the log subresource of pods.
  /// '*' means all resources, but not subresources.
  /// 'pods/*' means all subresources of pods.
  /// '*/scale' means all scale subresources.
  /// '*/*' means all resources and their subresources.
  /// 
  /// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
  /// 
  /// Depending on the enclosing object, subresources might not be allowed.
  /// Required.
  resources: Listing<String>

  /// APIGroups is the API groups the resources belong to.
  ///
  /// '*' is all groups.
  /// If '*' is present, the length of the slice must be one.
  /// Required.
  apiGroups: Listing<String>
}

