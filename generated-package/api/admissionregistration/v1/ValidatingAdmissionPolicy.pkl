//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
@K8sVersion { introducedIn = "1.30" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/admissionregistration/v1/MatchCondition.pkl"
import ".../api/admissionregistration/v1/MatchResources.pkl"
import ".../apimachinery/pkg/apis/meta/v1/Condition.pkl"

fixed apiVersion: "admissionregistration.k8s.io/v1"

fixed kind: "ValidatingAdmissionPolicy"

/// Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.>
metadata: ObjectMeta?

/// Specification of the desired behavior of the ValidatingAdmissionPolicy.
spec: ValidatingAdmissionPolicySpec?

/// The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way.
///
/// Populated by the system.
/// Read-only.
status: ValidatingAdmissionPolicyStatus?

/// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
class ValidatingAdmissionPolicySpec {
  /// Variables contain definitions of variables that can be used in composition of other expressions.
  ///
  /// Each variable is defined as a named CEL expression.
  /// The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.
  /// 
  /// The expression of a variable can refer to other variables defined earlier in the list but not those after.
  /// Thus, Variables must be sorted by the order of first appearance and acyclic.
  variables: Listing<Variable>?

  /// ParamKind specifies the kind of resources used to parameterize this policy.
  ///
  /// If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions.
  /// If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied.
  /// If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
  paramKind: ParamKind?

  /// auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.
  ///
  /// validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
  auditAnnotations: Listing<AuditAnnotation>?

  /// MatchConditions is a list of conditions that must be met for a request to be validated.
  ///
  /// Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector.
  /// An empty list of matchConditions matches all requests.
  /// There are a maximum of 64 match conditions allowed.
  /// 
  /// If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
  /// 
  /// The exact matching logic is (in order):
  ///   1.
  /// If ANY matchCondition evaluates to FALSE, the policy is skipped.
  ///   2.
  /// If ALL matchConditions evaluate to TRUE, the policy is evaluated.
  ///   3.
  /// If any matchCondition evaluates to an error (but none are FALSE):
  ///      - If failurePolicy=Fail, reject the request
  ///      - If failurePolicy=Ignore, the policy is skipped
  matchConditions: Listing<MatchCondition>?

  /// MatchConstraints specifies what resources this policy is designed to validate.
  ///
  /// The AdmissionPolicy cares about a request if it matches _all_ Constraints.
  /// However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding.
  /// Required.
  matchConstraints: MatchResources

  /// Validations contain CEL expressions which is used to apply the validation.
  ///
  /// Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
  validations: Listing<Validation>?

  /// failurePolicy defines how to handle failures for the admission policy.
  ///
  /// Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
  /// 
  /// A policy is invalid if spec.paramKind refers to a non-existent Kind.
  /// A binding is invalid if spec.paramRef.name refers to a non-existent resource.
  /// 
  /// failurePolicy does not define how validations that evaluate to false are handled.
  /// 
  /// When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
  /// 
  /// Allowed values are Ignore or Fail.
  /// Defaults to Fail.
  failurePolicy: String?
}

/// Variable is the definition of a variable that is used for composition.
///
/// A variable is defined as a named expression.
class Variable {
  /// Expression is the expression that will be evaluated as the value of the variable.
  ///
  /// The CEL expression has access to the same identifiers as the CEL expressions in Validation.
  expression: String

  /// Name is the name of the variable.
  ///
  /// The name must be a valid CEL identifier and unique among all variables.
  /// The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
  name: String
}

/// ParamKind is a tuple of Group Kind and Version.
class ParamKind {
  /// APIVersion is the API group version the resources belong to.
  ///
  /// In format of "group/version".
  /// Required.
  apiVersion: String

  /// Kind is the API kind the resources belong to.
  ///
  /// Required.
  kind: String
}

/// AuditAnnotation describes how to produce an audit annotation for an API request.
class AuditAnnotation {
  /// valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value.
  ///
  /// The expression must evaluate to either a string or null value.
  /// If the expression evaluates to a string, the audit annotation is included with the string value.
  /// If the expression evaluates to null or empty string the audit annotation will be omitted.
  /// The valueExpression may be no longer than 5kb in length.
  /// If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
  /// 
  /// If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding.
  /// All unique values produced by the valueExpressions will be joined together in a comma-separated list.
  /// 
  /// Required.
  valueExpression: String

  /// key specifies the audit annotation key.
  ///
  /// The audit annotation keys of a ValidatingAdmissionPolicy must be unique.
  /// The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
  /// 
  /// The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
  /// 
  /// If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical.
  /// In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
  /// 
  /// Required.
  key: String
}

/// Validation specifies the CEL expression which is used to apply the validation.
class Validation {
  /// Reason represents a machine-readable description of why this validation failed.
  ///
  /// If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client.
  /// The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge".
  /// If not set, StatusReasonInvalid is used in the response to the client.
  reason: String?

  /// Expression represents the expression which will be evaluated by CEL.
  ///
  /// ref: <https://github.com/google/cel-spec> CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
  /// 
  /// - 'object' - The object from the incoming request.
  /// The value is null for DELETE requests.
  /// - 'oldObject' - The existing object.
  /// The value is null for CREATE requests.
  /// - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
  /// - 'params' - Parameter resource referred to by the policy binding being evaluated.
  /// Only populated if the policy has a ParamKind.
  /// - 'namespaceObject' - The namespace object that the incoming object belongs to.
  /// The value is null for cluster-scoped resources.
  /// - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
  ///   For example, a variable named 'foo' can be accessed as 'variables.foo'.
  /// - 'authorizer' - A CEL Authorizer.
  /// May be used to perform authorization checks for the principal (user or service account) of the request.
  ///   See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz>
  /// - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
  ///   request resource.
  /// 
  /// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object.
  /// No other metadata properties are accessible.
  /// 
  /// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
  /// Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'.
  /// The keywords are:
  /// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
  /// 	  "import", "let", "loop", "package", "namespace", "return".
  /// Examples:
  ///   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
  ///   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
  ///   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
  /// 
  /// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1].
  /// Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
  ///   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
  ///     non-intersecting elements in `Y` are appended, retaining their partial order.
  ///   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
  ///     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
  /// Elements in `Y` with
  ///     non-intersecting keys are appended, retaining their partial order.
  /// Required.
  expression: String

  /// messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
  ///
  /// Since messageExpression is used as a failure message, it must evaluate to a string.
  /// If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails.
  /// If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset.
  /// If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged.
  /// messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
  /// Example: "object.x must be less than max ("+string(params.max)+")"
  messageExpression: String?

  /// Message represents the message displayed when validation fails.
  ///
  /// The message is required if the Expression contains line breaks.
  /// The message must not contain line breaks.
  /// If unset, the message is "failed rule: {Rule}".
  /// e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks.
  /// Message is required.
  /// The message must not contain line breaks.
  /// If unset, the message is "failed Expression: {Expression}".
  message: String?
}

/// ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
class ValidatingAdmissionPolicyStatus {
  /// The results of type checking for each expression.
  ///
  /// Presence of this field indicates the completion of the type checking.
  typeChecking: TypeChecking?

  /// The conditions represent the latest available observations of a policy's current state.
  conditions: Listing<Condition>?

  /// The generation observed by the controller.
  observedGeneration: Int?
}

/// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
class TypeChecking {
  /// The type checking warnings for each expression.
  expressionWarnings: Listing<ExpressionWarning>?
}

/// ExpressionWarning is a warning information that targets a specific expression.
class ExpressionWarning {
  /// The path to the field that refers the expression.
  ///
  /// For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
  fieldRef: String

  /// The content of type checking information in a human-readable form.
  ///
  /// Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
  warning: String
}

